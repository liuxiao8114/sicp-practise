(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right) (list entry left right))

(define (tree-list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
      result-list
      (copy-to-list
        (left-branch tree)
        (cons (entry tree) (copy-to-list (right-branch tree) result-list))
      )
    )
  )
  (copy-to-list tree '())
)

(define (list-tree elements)
  (car (partial-tree elements (length elements))))


(define (partial-tree e n)
  (if (= n 0)
    (cons '() e)
    (let ((left-size (quotient (- n 1) 2)))
      (let ((left-result (partial-tree e left-size)))
        (let ((left-tree (car left-result))
              (non-left-e (cdr left-result))
              (right-size (- (- n left-size) 1)))
          (let ((entry (car non-left-e))
                (right-result (partial-tree (cdr non-left-e) right-size)))
            (let ((right-tree (car right-result))
                  (remain-e (cdr right-result)))
              (cons (make-tree entry left-result right-result) remain-e)
            )
          )
        )
      )
    )
  )
)

(define (lookup given-key records)
  (cond ((null? records) false)
        ((eq? given-key (key (entry records))) (entry records))
        ((> given-key (key (entry records))) (lookup given-key (left-branch records)))
        (else (lookup given-key (right-branch records)))
  )
)
