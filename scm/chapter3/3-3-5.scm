(define (probe name connector)
  (define (print-probe value)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value)
  )

  (define (process-new-value)
    (print-probe (get-value connector)))

  (define (process-forget-value)
    (print-probe "?"))

  (define (me request)
    (cond ((eq? request 'have) (process-new-value))
          ((eq? request 'forget) (process-forget-value))
          (else (error "Unknown request -- PROBE " request))
    )
  )

  (connect connector me)
  me
)

(define (for-each-except exception procedure list)
  (define (loop items)
    (cond ((null? items) 'done)
          ((eq? exception (car list)) (loop (cdr list)))
          (else
            (procedure (car list))
            (loop (cdr list))
          )
    )
  )
  (loop list)
)

(define (make-connector)
  (let ((value false) (informant false) (constraints '()))
    (define (set-value newval setter)
      (cond ((not (has-value? me))
              (set! informant setter)
              (set! value newval)
              (for-each-except setter inform-value constraints))
            ((not (= value newval))
              (error "Contradiction" (list value newval)))
            (else 'ignored)
      )
    )

    (define (forget-value retractor)
      (if (eq? retractor informant)
        (begin
          (set! informant false)
          (for-each-except informant inform-no-value constraints)
        )
        'ignored
      )
    )

    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
        (set! constraints (cons new-constraint constraints))
      )
      (if (has-value? me)
        (inform-value new-constraint)
      )
      'done
    )

    (define (me request)
      (cond (((eq? request 'has-value?)
              (if informant true false))
             ((eq? request 'value) value)
             ((eq? request 'set-value!) set-value)
             ((eq? request 'forget) forget-value)
             ((eq? request 'connect) connect)
             (else (error "unknown operation -- CONNECTOR " request)))
      )
    )
    me
  )
)

(define (has-value? connector)
  (connector 'has-value?))

(define (get-value connector)
  (connector 'value))

(define (set-value! value connector informant)
  ((connector 'set-value!) value informant))

(define (connect connector new-constraint)
  ((connector 'connect) new-constraint))

(define (inform-value constraint) (constraint 'have))
(define (inform-no-value constraint) (constraint 'forget))

(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
            (set-value! sum (+ (get-value a1) (get-value a2)) me))
          ((and (has-value? sum) (has-value? a1))
            (set-value! a2 (- (get-value sum) (get-value a1)) me))
          ((and (has-value? sum) (has-value? a2))
            (set-value! a1 (- (get-value sum) (get-value a2)) me))
    )
  )

  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value)
  )

  (define (me request)
    (cond ((eq? request 'have)
           (process-new-value))
          ((eq? request 'forget)
           (process-forget-value))
          (else (error "unknown request -- " request))
    )
  )

  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me
)

(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((or (and (has-value? m1) (= (get-value m1) 0))
               (and (has-value? m2) (= (get-value m2) 0)))
            (set-value! product 0 me))
          ((and (has-value? m1) (has-value? m2))
            (set-value! product (* (get-value m1) (get-value m2)) me))
          ((and (has-value? product) (has-value? m1))
            (set-value! m1 (/ (get-value product) (get-value m2)) me))
          ((and (has-value? product) (has-value? m2))
            (set-value! m2 (/ (get-value product) (get-value m1)) me))
    )
  )

  (define (process-forget-value)
    (forget-value! product me)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (process-new-value)
  )

  (define (me request)
    (cond ((eq? request 'have) (process-new-value))
          ((eq? request 'forget) (process-forget-value))
          (else (error "unknown request -- " request))
    )
  )

  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me
)

(define (constant value connector)
  (define (me request)
    (error "unknown request -- " request)
  )
  (connect connector me)
  (set-value! connector value)
  me
)

;test case: 9C = 5(F - 32)
(define (celsius-fahrenheit-converter c f)
  (let ((w (make-connector))
        (v (make-connector))
        (u (make-connector)))
    (multiplier c w u)
    (multiplier v x u)
    (adder v y f)
    (constant 9 w)
    (constant 5 x)
    (constant 32 y)
    'ok
  )
)

(define C (make-connector))
(define F (make-connector))

(celsius-fahrenheit-converter C F)

(probe "Celsius temp" C)
(probe "Fahrenheit temp" F)

(set-value! C 25 'user)

(forget-value! C 'user)

(set-value! F 212 'user)
