(load "2-18.scm")

(define (deep-reverse l)
  (define (iter l result)
    (cond ((null? l) result)
          ((not (pair? (car l))) (iter (cdr l) (cons (car l) result)))
          (else (iter (cdr l) (cons (iter (car l) '()) result)))
    )
  )
  (iter l '())
)

(define (deep-reverse-2 l)
  (define (iter l result)
    (cond ((null? l) result)
          ((not (pair? (car l))) (iter (cdr l) (cons (car l) result)))
          (else (iter (cdr l) (cons (iter (car l) '()) result)))
    )
  )
  (iter l '())
)

(define (deep-reverse-3 l)
  (define (iter l ret)
    (cond ((null? l) ret)
          ((pair? (car l)) (iter (cdr l) (cons (deep-reverse-3 (car l)) ret)))
          (else (iter (cdr l) (cons (car l) ret)))
    )
  )
  (iter l '())
)

(define x '((1 2 (3 4)) ((5) (6 7 8))))

(deep-reverse-3 x)
