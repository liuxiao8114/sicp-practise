(load "2-3-2.scm")

(define (make-sum a1 a2)
  (cond ((and (number? a1) (number? a2)) (+ a1 a2))
        ((number0 a1) a2)
        ((number0 a2) a1)
        (else (list '+ a1 a2))
  )
)

(define (make-sum-improve a1 .others)
  (define (iter l)
    (accumulate make-sum 0 l))
  (if (null? others)
    (if (pair? a1)
      (iter a1)
      (error "not enough params")
    )
    (if (pair? a1)
      (iter (append a1 others))
      (iter (cons a1 others))
    )
  )
)

(define (make-product m1 m2)
  (cond ((and (number? m1) (number? m2)) (* m1 m2))
        ((or (number0 m1) (number0 m2)) 0)
        ((number1 m1) m2)
        ((number1 m2) m1)
        (else (list '* m1 m2))
  )
)

(define (make-product-improve m1 . others)
  (define (iter l)
    (accumulate make-product 1 l))
  (if (null? others)
    (if (pair? m1)
      (iter m1)
      (error "not enough params")
    )
    (if (pair? m1)
      (iter (append m1 others))
      (iter (cons m1 others))
    )
  )
)

(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '?)))

(define (base x) (cadr x))
(define (exponent x) (caddr x))

(define (make-expo base n)
  (cond ((= n 0) 1)
        ((= n 1) base)
        ((< n 0) (make-expo (/ 1 base) (- 0 n)))
        (else (list '? base n))
  )
)

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
          (if (same-variable? exp var) 1 0))
        ((sum? exp)
          (make-sum (deriv (addend exp) var) (deriv (augend exp) var)))
        ((product? exp)
          (make-sum
            (make-product-improve (multiplier exp) (deriv (multiplicand exp) var))
            (make-product-improve (multiplicand exp) (deriv (multiplier exp) var))))
        ((exponentiation? exp)
          (make-product-improve
            (exponent exp) (make-expo (base exp) (- (exponent exp) 1)) (deriv (base exp) var)))
        (else (error "this is liu xiao"))
  )
)

;(2 * x + y) ? 10
;(deriv '(? (+ (* 2 x) y) 10) 'x)


(deriv '(? (+ x y) 2) 'x)
