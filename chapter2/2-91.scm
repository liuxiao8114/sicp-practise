;implemented in 2-5-3.scm

(define (div-poly p1 p2)
  (if (same-variable? (variable p1) (variable p2))
    (let ((result (div-terms (term-list p1) (term-list p2))))
      (if (and (empty-termlist? (car result)) (empty-termlist? (cadr result)))
        0
        (make-poly (variable p1) result)
      )
    )
    (error "not same variable : " (list p1 p2))
  )
)

(define (div-terms L1 L2)
  (if (empty-termlist? L1)
     (list (the-empty-termlist) (the-empty-termlist))
     (let ((t1 (first-term L1))
           (t2 (first-term L2)))
       (if (> (order t2) (order t1))
           (list (the-empty-termlist) L1)
           (let ((new-c (div (coeff t1) (coeff t2)))
                 (new-o (- (order t1) (order t2))))
             (let
               ((rest-of-result (div-terms (add-terms L1 (mul-term-by-all-terms (make-term new-o (- 0 new-c)) L2)) L2)))
               (list (cons (make-term new-o new-c) (car rest-of-result)) (cadr rest-of-result))
             )
           )
       )
     )
  )
)
