(define (make-deque)
  (let ((front-ptr '())
        (rear-ptr '()))

    (define (set-ptr! e i) (set! e i))
    (define (empty-queue) (null? front-ptr))

    (define (rear-insert-queue! i)
      (let ((new-pair (cons i '())))
        (if (empty-queue)
          (begin (set-ptr! front-ptr new-pair)
            (set-ptr! rear-ptr new-pair)
            front-ptr
          )
          (begin (set-cdr! rear-ptr new-pair)
            (set-ptr! rear-ptr new-pair)
            front-ptr
          )
        )
      )
    )

    (define (front-insert-queue! i)
      (let ((new-pair (cons i '())))
        (if (empty-queue)
          (begin (set-ptr! front-ptr new-pair)
            (set-ptr! rear-ptr new-pair)
            front-ptr
          )
          (begin (set-ptr! front-ptr (cons new-pair front-ptr))
            front-ptr
          )
        )
      )
    )

    (define (front-delete-queue!)
      (if (empty-queue)
        (error "empty queue!")
        (begin (set-ptr! front-ptr (cdr front-ptr)) front-ptr)
      )
    )

    (define (rear-delete-queue!)
      (if (empty-queue)
        (error "empty queue!")
        (front-ptr)
      )
    )

    (define (dispatch m)
      (cond ((eq? m 'front-insert-queue!) front-insert-queue!)
            ((eq? m 'front-delete-queue!) front-delete-queue!)
            ((eq? m 'rear-insert-queue!) rear-insert-queue!)
            ((eq? m 'rear-delete-queue!) rear-delete-queue!)
            ((eq? m 'empty-queue) empty-queue)
            ((eq? m 'front-ptr) front-ptr)
            ((eq? m 'rear-ptr) rear-ptr)
      )
    )
    dispatch
  )
)

(define front-insert-queue (lambda (q i) ((q 'front-insert-queue!) i)))
(define front-delete-queue (lambda (q) ((q 'front-delete-queue!))))
(define rear-insert-queue (lambda (q i) ((q 'rear-insert-queue!) i)))
(define rear-delete-queue (lambda (q) ((q 'rear-delete-queue!))))
(define empty-queue (lambda (q) ((q 'empty-queue))))
(define front-ptr (lambda (q) (q 'front-ptr)))
(define rear-ptr (lambda (q) (q 'rear-ptr)))

(define q (make-queue))
(front-insert-queue q 'a)
