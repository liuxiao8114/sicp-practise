(define (memq? x list)
  (cond ((null? list) #f)
        ((eq? x (car list)) #t)
        (else (memq? x (cdr list)))
  )
)

(define (loop? l)
  (define (iter l temp)
    (cond ((not (pair? l)) #f)
          ((memq? (car x) temp) #t)
  ;        ((pair? (car x)) (iter (car x) (cons (car x) temp)))
  ;        (else (iter (cdr x) (cons (car x) temp)))
          (else (iter (cdr l) (cons (car l) temp)))
    )
  )

  (iter l '())
)

(define loop (list 'a 'b))
(set-cdr! loop loop)
(define no-loop (list 'a 'b 'a))

;(loop? loop)
;(loop? no-loop)
