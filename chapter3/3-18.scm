(define (f x)
  (cond ((not (or (null? x) (pair? x))) #f)
        ((eq? (car x) x) #t)
        (else (f (cdr x)))
  )
)

(define (loop? lst)
  (let ((identity (cons '() '())))
    (define (iter remain-list)
      (cond ((null? lst) #f)
            ((eq? idengtity (car lst)) #t)
            (else
              (set-car! remain-list identity)
              (iter (cdr lst)))
      )
    )
    (iter lst)
  )
)
